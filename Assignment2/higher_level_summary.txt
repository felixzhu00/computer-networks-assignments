NOTE: This summary is included in the README.md, look in README for more styled version of the summary

High Level Summary:
Part A
(a) Look through the PCAP file for distinct tcp flows and append it to a list. A flow is considered distinct if there is no sender and receiver pair that is already in the list. The length of this list will be the number of distinct flows that are happening. This list will be used throughout the homework as the variable distinct_flows.

(b) Look through the PCAP file, only noting down the first two transactions between the sender and receiver of each distinct tcp flow in distinct_flows. The first transactions will be two tuples from sender to receiver and receiver to sender (This is picked based on their port). Same with the second transaction. These 4 tuples will be stored in a list that is returned. These tuples contain source IP address,destination IP address, source port, destination port, TCP sequence number, TCP acknowledgement number and receiver window size.

(c) To obtain the throughput for each distinct tcp flow, the code will need the period as well. It loops through the PCAP file and finds the timestamp of the first packet and the last packet of that particular flow. The first packet is the first communication including the 3 way handshake. The last packet is the first FIN flag thus any other packet following the FIN flag will be ignored. While looping through the code also accumulates the length of the tcp to get the total data. Dividing the total data by the period will get you the throughput which is returned back to the main method.

PartB
(i) To get the three congestion windows for each distinct tcp flow, the code will first need a RTT. This can easily be obtained by looking at the 3 way handshakeâ€˜s start time and end time. The difference of the end time and start time will yield you an RTT to be used for later in the code. Regularly the RTT of a tcp flow will change throughout its lifespan but because we are only interested in the first 3 congestion windows this RTT will work just fine as an estimation. Congestion window for a certain RTT interval can be obtained by counting the occurrence of the sender talking to the receiver from a lower bound timestamp to an upper bound timestamp. The upper bound will always be 1 RTT greater than the lower bound when looping. The counted occurrence will later be appended to a matrix and returned to the main method to be read as the congestion window for 3 congestion windows for all distinct tcp flow.

The congestion window size grows exponentially(doubles) until it hits the ssthresh and increases linearly(increments by 1). The best example would be seen in Result of Running Code > TCP Flow 3 > Part B > i) where the First 3 Congestion Window Size is [20, 43, 44]. 

(ii) For each flow separate the packets by whether the packet is sent by the sender or received by the sender. The two lists will have elements with the property of index(use for ordering later), seq, and ack. List with tuples of packets sent by the sender will be used for sequence numbers mainly. List with tuples of packets received by the sender will be used for acknowledgement numbers mainly. Get the sequence numbers of the packets where the occurrence of the seq is greater than 1 sent by the sender. Append that to a list1. Get the acknowledgement numbers of the packets where the occurrence of the ack is greater than 3 received by the sender. Append that to a list2. Compose list3 with common elements shared between the two lists. Count the times that the first duplicate ACK time is after the retransmitted packet time in list3. Number of times that retransmission was due to triple duplicate ACK should then be the length of list 3 subtracted by the times that the first duplicate ACK time is after the retransmitted packet time in list3, and retransmission due to timeout should be the length of list1 minus retransmission due to triple duplicate